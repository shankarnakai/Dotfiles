" enable plugin manager Vundle
set nocompatible              " be iMproved, required

let g:python3_host_prog="/usr/local/bin/python3"

filetype off                  " required
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" basic plugins
Plugin 'scrooloose/nerdtree'
Plugin 'tiagofumo/vim-nerdtree-syntax-highlight' " #NUTELLA
Plugin 'scrooloose/nerdcommenter'
Plugin 'majutsushi/tagbar'
Plugin 'buffet.vim'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'jasoncodes/ctrlp-modified.vim'
Plugin 'vim-syntastic/syntastic'
Plugin 'tpope/vim-surround' " provides mappings to easily delete, change and add such surroundings in pairs
"Plugin 'Shougo/neocomplete.vim'

" UML
Plugin 'scrooloose/vim-slumlord'
Plugin 'aklt/plantuml-syntax'

" theme
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

" file ident
Plugin 'maksimr/vim-jsbeautify'
Plugin 'neoclide/coc.nvim'

" vsc
Plugin 'tpope/vim-git'
Plugin 'airblade/vim-gitgutter'

" languages suports
" GO
Plugin 'Blackrush/vim-gocode'
Plugin 'fatih/vim-go'
Plugin 'dgryski/vim-godef'

" Rust
Plugin 'rust-lang/rust.vim'

" Scala 
if executable('scalac')
  Plugin 'derekwyatt/vim-scala', { 'for': 'scala' }
endif

" Haskell 
if executable('ghc')
  Plugin 'neovimhaskell/haskell-vim', { 'for': 'haskell' }
  Plugin 'owickstrom/neovim-ghci', { 'for': 'haskell' }
endif

" Javascript
Plugin 'pangloss/vim-javascript'
Plugin 'leafgarland/typescript-vim'
Plugin 'Quramy/tsuquyomi'

" ELM
if executable('elm')
    Plugin 'elmcast/elm-vim', {'for': 'elm'}
endif

"snipmate
Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'tomtom/tlib_vim'

" Allow to add custom plugins
if filereadable(expand("~/.vimrc.plugins.local"))
  source ~/.vimrc.plugins.local
endif

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

"********************************************************************


" Configurations to apply on pluins
" All plugins configs are saved after here

"AIRLINE THEME
let g:airline_powerline_fonts = 1
let g:airline_theme='kolor'

"********************************************************************

" NERDTREE
let NERDTreeIgnore=['\.pyc$', '\.pyo$', '\.rbc$', '\.rbo$', '\.class$', '\.o$', '\~$']
map <C-n> :call CustomNERDTreeToggle() <CR>

function! IsNerdTreeEnabled()
    return (exists('t:NERDTreeBufName') && bufwinnr(t:NERDTreeBufName) != -1)
endfunction

function! CustomNERDTreeToggle()
        if !IsNerdTreeEnabled() && expand('%:t') != "" "The winnr('$')  Get the index of the last window
                NERDTreeFind
        else
                NERDTreeToggle
        endif
endfunction

" calls NERDTreeFind iff NERDTree is active, current window contains a modifiable file, and we're not in vimdiff
function! s:syncTree()
  let s:curwnum = winnr()
  NERDTreeFind
  exec s:curwnum . "wincmd w"
endfunction

function! s:syncTreeIf()
        if IsNerdTreeEnabled() "The winnr('$')  Get the index of the last window
                call s:syncTree()
        endif
endfunction

" Shows NERDTree on start and synchronizes the tree with opened file when switching between opened windows
autocmd BufEnter * call s:syncTreeIf()

" Automatically close vim if only NERDTree left
autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

"********************************************************************

" NERD COMMENTER
map <Leader>/ <plug>NERDCommenterToggle

"********************************************************************
" syntastic

let g:syntastic_enable_signs=1
let g:syntastic_quiet_messages = {'level': 'warnings'}
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_jump = 0
let g:syntastic_full_redraws=1

let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go'] }
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0

"********************************************************************
"GIT

map <Leader>tg :GitGutterToggle <CR>
map Tg :GitGutterToggle <CR>
map <Leader>tgs :GitGutterSignsToggle <CR>
map Tgs :GitGutterSignsToggle <CR>
map <Leader>tgl :GitGutterLineHighlightsToggle <CR>
map Tgl :GitGutterLineHighlightsToggle <CR>

"********************************************************************
"GO

"syntastic Go
let g:syntastic_auto_loc_list = 1
let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']

"vim-go
let g:gofmt_command="goimports"
let g:go_list_type = "quickfix"
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_fields = 1
let g:go_highlight_types = 1
let g:go_highlight_operators = 1 
let g:go_highlight_build_constraints = 1
let g:godef_split=0 "0 new buffer, 1 split window, 2 new tab, 3 vsplit window
command! GoDefNewTab call ChangeGoDef(2)
command! GoDefCurrent call ChangeGoDef(0)
command! GoDefHorizontal call ChangeGoDef(1)
command! GoDefVertical call ChangeGoDef(3)
function! ChangeGoDef(v)
  echo "changing godef split to" a:v
  let g:godef_split=a:v
endfunction

"********************************************************************
"JAVASCRIPT

let g:syntastic_javascript_checkers = ['']

let g:javascript_plugin_jsdoc = 1
let g:typescript_indent_disable = 0
let g:typescript_opfirst='\%([<>=,?^%|*/&]\|\([-:+]\)\1\@!\|!=\|in\%(stanceof\)\=\>\)'
setlocal indentkeys+=0

"ELM
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1

let g:elm_syntastic_show_warnings = 1

"********************************************************************

au BufRead,BufNewFile *.sbt set filetype=scala
set hidden

" Some servers have issues with backup files
set nobackup
set nowritebackup

" Better display for messages
set cmdheight=2

" You will have a bad experience with diagnostic messages with the default 4000.
set updatetime=300

" Don't give |ins-completion-menu| messages.
set shortmess+=c

" Always show signcolumns
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

" Used in the tab autocompletion for coc
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[c` and `]c` to navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Used to expand decorations in worksheets
nmap <Leader>ws <Plug>(coc-metals-expand-decoration)

" Use K to either doHover or show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType scala setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add status line support, for integration with other plugin, checkout `:h coc-status`
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

" Notify coc.nvim that <enter> has been pressed.
" Currently used for the formatOnType feature.
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
      \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Toggle panel with Tree Views
nnoremap <silent> <space>t :<C-u>CocCommand metals.tvp<CR>
" Toggle Tree View 'metalsBuild'
nnoremap <silent> <space>tb :<C-u>CocCommand metals.tvp metalsBuild<CR>
" Toggle Tree View 'metalsCompile'
nnoremap <silent> <space>tc :<C-u>CocCommand metals.tvp metalsCompile<CR>
" Reveal current current class (trait or object) in Tree View 'metalsBuild'
nnoremap <silent> <space>tf :<C-u>CocCommand metals.revealInTreeView metalsBuild<CR>

"********************************************************************

" TAGBAR
let g:tagbar_type_go = {
      \ 'ctagstype' : 'go',
      \ 'kinds'     : [
              \ 'p:package',
              \ 'i:imports:1',
              \ 'c:constants',
              \ 'v:variables',
              \ 't:types',
              \ 'n:interfaces',
              \ 'w:fields',
              \ 'e:embedded',
              \ 'm:methods',
              \ 'r:constructor',
              \ 'f:functions'
      \ ],
      \ 'sro' : '.',
      \ 'kind2scope' : {
              \ 't' : 'ctype',
              \ 'n' : 'ntype'
      \ },
      \ 'scope2kind' : {
              \ 'ctype' : 't',
              \ 'ntype' : 'n'
      \ },
      \ 'ctagsbin'  : 'gotags',
      \ 'ctagsargs' : '-sort -silent'
      \ }

let g:tagbar_type_javascript = {
    \ 'ctagstype' : 'JavaScript',
    \ 'kinds'     : [
        \ 'o:objects',
        \ 'f:functions',
        \ 'a:arrays',
        \ 's:strings'
    \ ]
\ }

map <F8> :TagbarToggle<CR>
"********************************************************************
"CrtlP
map <Leader>m :CtrlPModified<CR>
map <leader>t :CtrlPBufTag<CR>
map <leader>b :CtrlPBuffer<CR>
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']
let g:ctrlp_custom_ignore = {
      \ 'dir':  '\v[\/]\.(git|hg|svn)$',
      \ 'file': '\v\.(exe|so|dll)$',
      \ }
let g:ctrlp_extensions = ['buffertag'] " tag, buffertag, quickfix, dir, rtscript, undo, line, changes, mixed, bookmarkdir

"********************************************************************

map <F2> :Bufferlist <CR>
map <Leader>f :Rgrep <CR>
map <Leader>fb :Bgrep <CR>
