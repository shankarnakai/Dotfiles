" enable plugin manager Vundle
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" basic plugins
Plugin 'scrooloose/nerdtree'
Plugin 'tiagofumo/vim-nerdtree-syntax-highlight' " #NUTELLA
Plugin 'scrooloose/nerdcommenter'
Plugin 'majutsushi/tagbar'
Plugin 'buffet.vim'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'jasoncodes/ctrlp-modified.vim'
Plugin 'vim-syntastic/syntastic'
Plugin 'tpope/vim-surround' " provides mappings to easily delete, change and add such surroundings in pairs
"Plugin 'Shougo/neocomplete.vim'

" theme
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

" file ident
Plugin 'maksimr/vim-jsbeautify'
Plugin 'Chiel92/vim-autoformat'

" vsc
Plugin 'tpope/vim-git'
Plugin 'airblade/vim-gitgutter'

" languages suports
" GO
Plugin 'Blackrush/vim-gocode'
Plugin 'fatih/vim-go'
Plugin 'dgryski/vim-godef'

" Javascript
Plugin 'pangloss/vim-javascript'
Plugin 'leafgarland/typescript-vim'
Plugin 'Quramy/tsuquyomi'

"snipmate
Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'tomtom/tlib_vim'

" plugin from http://vim-scripts.org/vim/scripts.html

" Allow to add custom plugins
if filereadable(expand("~/.vimrc.plugins.local"))
  source ~/.vimrc.plugins.local
endif

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

"********************************************************************

" Configurations to apply on pluins
" All plugins configs are saved after here

"AIRLINE THEME
let g:airline_powerline_fonts = 1
let g:airline_theme='kolor'

"********************************************************************

" NERDTREE
let NERDTreeIgnore=['\.pyc$', '\.pyo$', '\.rbc$', '\.rbo$', '\.class$', '\.o$', '\~$']
map <C-n> :call CustomNERDTreeToggle() <CR>

function! IsNerdTreeEnabled()
    return exists('t:NERDTreeBufName') && bufwinnr(t:NERDTreeBufName) != -1
endfunction

function! CustomNERDTreeToggle()
        if !IsNerdTreeEnabled() "The winnr('$')  Get the index of the last window
                NERDTreeFind
        else
                NERDTreeToggle
        endif
endfunction

" calls NERDTreeFind iff NERDTree is active, current window contains a modifiable file, and we're not in vimdiff
function! s:syncTree()
  let s:curwnum = winnr()
  NERDTreeFind
  exec s:curwnum . "wincmd w"
endfunction

function! s:syncTreeIf()
        if winnr("$") > 1 && IsNerdTreeEnabled() "The winnr('$')  Get the index of the last window
                call s:syncTree()
        endif
endfunction

" Shows NERDTree on start and synchronizes the tree with opened file when switching between opened windows
autocmd BufEnter * call s:syncTreeIf()

" Automatically close vim if only NERDTree left
autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Focus on opened view after starting (instead of NERDTree)
autocmd VimEnter * call s:syncTree()
au VimEnter * :wincmd w

" Auto refresh NERDTree files
autocmd CursorHold,CursorHoldI * if (winnr("$") > 1) | call NERDTreeFocus() | call g:NERDTree.ForCurrentTab().getRoot().refresh() | call g:NERDTree.ForCurrentTab().render() | wincmd w | endif

"********************************************************************

" NERD COMMENTER
map <Leader>/ <plug>NERDCommenterToggle

"********************************************************************
" syntastic

let g:syntastic_enable_signs=1
let g:syntastic_quiet_messages = {'level': 'warnings'}
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_jump = 0
let g:syntastic_full_redraws=1

let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go'] }
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

"********************************************************************
"GIT

map <Leader>tg :GitGutterToggle <CR>
map Tg :GitGutterToggle <CR>
map <Leader>tgs :GitGutterSignsToggle <CR>
map Tgs :GitGutterSignsToggle <CR>
map <Leader>tgl :GitGutterLineHighlightsToggle <CR>
map Tgl :GitGutterLineHighlightsToggle <CR>

"********************************************************************
"GO

"syntastic Go
let g:syntastic_auto_loc_list = 1
let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']

"vim-go
let g:gofmt_command="goimports"
let g:go_list_type = "quickfix"
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_fields = 1
let g:go_highlight_types = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
let g:godef_split=0 "0 new buffer, 1 split window, 2 new tab, 3 vsplit window
command! GoDefNewTab call ChangeGoDef(2)
command! GoDefCurrent call ChangeGoDef(0)
command! GoDefHorizontal call ChangeGoDef(1)
command! GoDefVertical call ChangeGoDef(3)
function! ChangeGoDef(v)
  echo "changing godef split to" a:v
  let g:godef_split=a:v
endfunction

"********************************************************************
"JAVASCRIPT

let g:javascript_plugin_jsdoc = 1
let g:typescript_indent_disable = 0
let g:typescript_opfirst='\%([<>=,?^%|*/&]\|\([-:+]\)\1\@!\|!=\|in\%(stanceof\)\=\>\)'
setlocal indentkeys+=0

"********************************************************************
"AutoFormat
noremap <c-f> :Autoformat<cr>
vnoremap <buffer>  <c-f> :Autoformat<cr>

"********************************************************************

" TAGBAR
let g:tagbar_type_go = {
      \ 'ctagstype' : 'go',
      \ 'kinds'     : [
              \ 'p:package',
              \ 'i:imports:1',
              \ 'c:constants',
              \ 'v:variables',
              \ 't:types',
              \ 'n:interfaces',
              \ 'w:fields',
              \ 'e:embedded',
              \ 'm:methods',
              \ 'r:constructor',
              \ 'f:functions'
      \ ],
      \ 'sro' : '.',
      \ 'kind2scope' : {
              \ 't' : 'ctype',
              \ 'n' : 'ntype'
      \ },
      \ 'scope2kind' : {
              \ 'ctype' : 't',
              \ 'ntype' : 'n'
      \ },
      \ 'ctagsbin'  : 'gotags',
      \ 'ctagsargs' : '-sort -silent'
      \ }

let g:tagbar_type_javascript = {
    \ 'ctagstype' : 'JavaScript',
    \ 'kinds'     : [
        \ 'o:objects',
        \ 'f:functions',
        \ 'a:arrays',
        \ 's:strings'
    \ ]
\ }

map <F8> :TagbarToggle<CR>
"********************************************************************
"CrtlP
map <Leader>m :CtrlPModified<CR>
map <leader>t :CtrlPBufTag<CR>
map <leader>b :CtrlPBuffer<CR>
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']
let g:ctrlp_custom_ignore = {
      \ 'dir':  '\v[\/]\.(git|hg|svn)$',
      \ 'file': '\v\.(exe|so|dll)$',
      \ }
let g:ctrlp_extensions = ['buffertag'] " tag, buffertag, quickfix, dir, rtscript, undo, line, changes, mixed, bookmarkdir

"********************************************************************

map <F2> :Bufferlist <CR>
map <Leader>f :Rgrep <CR>
map <Leader>fb :Bgrep <CR>
